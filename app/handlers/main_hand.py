import asyncio
import os
from aiogram import Router,F
from aiogram.types import Message,CallbackQuery
from aiogram.filters import CommandStart,Command,CommandObject
from aiogram.fsm.state import StatesGroup,State
from aiogram.exceptions import TelegramAPIError
from aiogram.enums import ContentType
from aiogram.fsm.context import FSMContext
from app.keyboard.keyboard import *
from app.config.config import BOT_USERNAME

from hashids import Hashids

main_router = Router()
class StateMessage(StatesGroup):
    message = State()

@main_router.message(CommandStart(deep_link=True))
async def start_ref(message:Message, cipher:Hashids,command:CommandObject,state:FSMContext):
    await state.set_state(StateMessage.message)
    await state.update_data(target_id=command.args)
    msg = """
–í–∏ –º–æ–∂–µ—Ç–µ <b>–∞–Ω–æ–Ω—ñ–º–Ω–æ</b> –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–∫—É —Ü—å–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –±—É–¥—å-—â–æ:
üí¨ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, üì∑ —Ñ–æ—Ç–æ, üé• –≤—ñ–¥–µ–æ –∞–±–æ üìé —Ñ–∞–π–ª.

–ñ–æ–¥–Ω–∏—Ö —ñ–º–µ–Ω, –∂–æ–¥–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤ ‚Äî –≤–∞—à–∞ –æ—Å–æ–±–∞ –∑–∞–ª–∏—à–∏—Ç—å—Å—è<b> –ø–æ–≤–Ω—ñ—Å—Ç—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—é</b> üîí
–°–º—ñ–ª–∏–≤–æ –¥—ñ–ª—ñ—Ç—å—Å—è –¥—É–º–∫–∞–º–∏, –≤—Ä–∞–∂–µ–Ω–Ω—è–º–∏ —á–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —â–æ—Å—å –≤–∞–∂–ª–∏–≤–µ üí≠"""
    await message.reply(msg,parse_mode='html')
@main_router.message(StateMessage.message)
async def input_message(message:Message, cipher:Hashids,state:FSMContext):
    await state.update_data(message=message.text)
    await send_message(message=message,state=state,cipher=cipher)

async def send_message(message:Message, cipher:Hashids,state:FSMContext):
    data = await state.get_data()
    
    try:
        await state.clear()
        try:
            target_id = cipher.decode(data['target_id'])[0]
        except:
            await message.reply(
"""üò¨ –ù–µ–≤–∞–ª—ñ–¥–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è!\n–¢–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ —ñ—Å–Ω—É—î!\n–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–¥—Ä—É–∫–æ–≤–∞–Ω–∞
–Ø–∫—â–æ –≤–∏ <b>–≤–ø–µ–≤–Ω–µ–Ω—ñ</b> —â–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å–ø—Ä–∞–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º—Ç–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!""",parse_mode="HTML")
            return
        keyboard = get_keyboard_reply(cipher.encode(message.from_user.id))
        caption_media = """
<b>üì∑Ô∏è–û—Ç—Ä–∏–º–∞–Ω–æ –º–µ–¥—ñ–∞!</b>\n
–î–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É‚§µ"""
        match message.content_type:
            case ContentType.PHOTO:
                file_id = message.photo[-1].file_id
                await message.bot.send_photo(chat_id=target_id, photo=file_id, caption=caption_media, reply_markup=keyboard,parse_mode='html')
            case ContentType.VIDEO:
                file_id = message.video.file_id
                await message.bot.send_video(chat_id=target_id, video=file_id, caption=caption_media, reply_markup=keyboard,parse_mode='html')
            case ContentType.DOCUMENT:
                file_id = message.document.file_id
                await message.bot.send_document(chat_id=target_id, document=file_id, caption=caption_media, reply_markup=keyboard,parse_mode='html')
            case ContentType.AUDIO:
                file_id = message.audio.file_id
                await message.bot.send_audio(chat_id=target_id, audio=file_id, caption=caption_media, reply_markup=keyboard,parse_mode='html')
            case ContentType.ANIMATION:
                file_id = message.animation.file_id
                await message.bot.send_animation(chat_id=target_id, animation=file_id, caption=caption_media, reply_markup=keyboard,parse_mode='html')
            case ContentType.VOICE:
                file_id = message.voice.file_id
                await message.bot.send_voice(chat_id=target_id, voice=file_id, reply_markup=keyboard)
                await message.bot.send_message(chat_id=target_id, text=caption_media, reply_markup=keyboard,parse_mode='html')
            case ContentType.VIDEO_NOTE:
                file_id = message.video_note.file_id
                await message.bot.send_video_note(chat_id=target_id, video_note=file_id, reply_markup=keyboard)
                await message.bot.send_message(chat_id=target_id, text=caption_media, reply_markup=keyboard,parse_mode='html')
            case ContentType.STICKER:
                file_id = message.sticker.file_id
                await message.bot.send_sticker(chat_id=target_id, sticker=file_id, reply_markup=keyboard)
                await message.bot.send_message(chat_id=target_id, text=caption_media,parse_mode='html',reply_markup=keyboard)
            case ContentType.TEXT:
                caption_text = f'''<b>üí¨–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!</b>\n{message.text}\n\n \n–î–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É‚§µ'''
                await message.bot.send_message(chat_id=target_id, text=caption_text, reply_markup=keyboard,parse_mode='html')
            case _:
                await message.reply("ü´®–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö")
                return
    except TelegramAPIError as e:
        await message.reply(f"üòü–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–æ–≥–æ —á–∞—Ç–∞ –∑ –±–æ—Ç–æ–º...\n–î–µ—Ç–∞–ª—ñ:{e}")
        return
    except Exception as e:
        
        await message.reply(f"üòü–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞...\n–î–µ—Ç–∞–ª—ñ:{e}")
        return
    await message.reply(
'<b>üì¶–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ</b>,\n–æ—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å',reply_markup=get_keyboard(data["target_id"]),parse_mode='HTML'
)    
@main_router.callback_query(F.data.startswith('send'))
async def callback_send(callback:CallbackQuery,state:FSMContext):
    _, type,target_id = callback.data.split(":")
    if type == "more":
        msg = "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:"
    else:
        msg = "–í—ñ–¥–ø–æ–≤—ñ–¥—å"
    await state.set_state(StateMessage.message)
    await state.update_data(target_id=target_id)
    await callback.message.reply(msg)
    await callback.answer()
@main_router.message(Command(commands=['ref','start']))
async def ref(message:Message, cipher:Hashids):
    ref = cipher.encode(message.from_user.id)
    msg = f"""
–û—Ç—Ä–∏–º–∞–ª–∏ —Å–≤–æ—î <b>–∞–Ω–æ–Ω—ñ–º–Ω–µ</b> –ø–æ—Å–∏–ª–∞–Ω–Ω—è üîó ‚Äî –≤—Å—Ç–∞–≤—Ç–µ –π–æ–≥–æ –≤ –ø—Ä–æ—Ñ—ñ–ª—å —Å–æ—Ü–º–µ—Ä–µ–∂, —Å—Ç–æ—Ä—ñ–∑ –∞–±–æ –±—ñ–æ.
–¢–∞–∫ –¥—Ä—É–∑—ñ, –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –∞–±–æ –Ω–∞–≤—ñ—Ç—å –≤–∏–ø–∞–¥–∫–æ–≤—ñ –ª—é–¥–∏ –º–æ–∂—É—Ç—å –∞–Ω–æ–Ω—ñ–º–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ —á–∏ —Ñ–∞–π–ª–∏ üé•üì∏üí¨.

–¶–µ –ø—Ä–æ—Å—Ç–∏–π —Å–ø–æ—Å—ñ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ <b>—á–µ—Å–Ω–∏–π —Ñ—ñ–¥–±–µ–∫</b> —ñ —Ü—ñ–∫–∞–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –±–µ–∑ —Ä–æ–∑–∫—Ä–∏—Ç—Ç—è –æ—Å–æ–±–∏—Å—Ç–∏—Ö –¥–∞–Ω–∏—Ö üïµÔ∏è‚Äç‚ôÇÔ∏è‚ú®.
–î—ñ–ª—ñ—Ç—å—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º, –±—É–¥—å—Ç–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏–º–∏ ‚Äî —ñ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞–π—Ç–µ –∑–∞ —Å—é—Ä–ø—Ä–∏–∑–∞–º–∏, —è–∫—ñ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å <b>–∞–Ω–æ–Ω—ñ–º–Ω—ñ—Å—Ç—å! üéâ</b>\n
https://t.me/{BOT_USERNAME}?start={ref} - –ü–æ—à–∏—Ä—é–π —Ü–µ–π <b>—Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–æ–¥</b> —ñ –¥–∏–≤–∏—Å—å, —è–∫ –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è! üöÄ
"""
    share_url = f"https://t.me/share/url?url=‚û•https://t.me/{BOT_USERNAME}?start={ref}"
    await message.reply(msg,reply_markup=keyboard_share(ref,share_url),parse_mode='html')