import asyncio
import os
from aiogram import Bot,Dispatcher,Router,F
from aiogram.types import Message,CallbackQuery
from aiogram.filters import CommandStart,StateFilter,Command,CommandObject
from aiogram.fsm.state import StatesGroup,State
from aiogram.enums import ContentType
from aiogram.fsm.context import FSMContext
from keyboard import *

from dotenv import load_dotenv
from hashids import Hashids
load_dotenv("key.env")
clipher =Hashids(salt=os.getenv("KEY"),min_length=8)
bot  = Bot("7659680233:AAH284AveoDlOLQoVxerCXkqug5k6dKV2J0")
dp = Dispatcher()
class StateMessage(StatesGroup):
    msg = State()

@dp.message(CommandStart(deep_link=True))
async def start_ref(msg:Message,command:CommandObject,state:FSMContext):
    await state.set_state(StateMessage.msg)
    await state.update_data(target_id=command.args)
    print(command.args)
    message = """
–í–∏ –º–æ–∂–µ—Ç–µ <b>–∞–Ω–æ–Ω—ñ–º–Ω–æ</b> –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–∫—É —Ü—å–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –±—É–¥—å-—â–æ:
üí¨ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, üì∑ —Ñ–æ—Ç–æ, üé• –≤—ñ–¥–µ–æ –∞–±–æ üìé —Ñ–∞–π–ª.

–ñ–æ–¥–Ω–∏—Ö —ñ–º–µ–Ω, –∂–æ–¥–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤ ‚Äî –≤–∞—à–∞ –æ—Å–æ–±–∞ –∑–∞–ª–∏—à–∏—Ç—å—Å—è<b> –ø–æ–≤–Ω—ñ—Å—Ç—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—é</b> üîí
–°–º—ñ–ª–∏–≤–æ –¥—ñ–ª—ñ—Ç—å—Å—è –¥—É–º–∫–∞–º–∏, –≤—Ä–∞–∂–µ–Ω–Ω—è–º–∏ —á–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —â–æ—Å—å –≤–∞–∂–ª–∏–≤–µ üí≠"""
    await msg.reply(message,parse_mode='html')
@dp.message(StateMessage.msg)
async def input_msg(msg:Message,state:FSMContext):
    await state.update_data(msg=msg.text)
    await send_msg(msg=msg,state=state)

async def send_msg(msg:Message,state:FSMContext):
    data = await state.get_data()
    print(data)
    print(clipher.decode(data['target_id']))
    
    try:
        await state.clear()
        
        target_id = clipher.decode(data['target_id'])[0]
        keyboard = get_keyboard_reply(data['target_id'])
        print(keyboard)
        print(target_id)
        caption_media = """
<b>üì∑Ô∏è–û—Ç—Ä–∏–º–∞–Ω–æ –º–µ–¥—ñ–∞!</b>\n
–î–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É‚§µ"""
        match msg.content_type:
            case ContentType.PHOTO:
                file_id = msg.photo[-1].file_id
                await msg.bot.send_photo(chat_id=target_id, photo=file_id, caption=caption_media, reply_markup=keyboard,parse_mode='html')
            case ContentType.VIDEO:
                file_id = msg.video.file_id
                await msg.bot.send_video(chat_id=target_id, video=file_id, caption=caption_media, reply_markup=keyboard,parse_mode='html')
            case ContentType.DOCUMENT:
                file_id = msg.document.file_id
                await msg.bot.send_document(chat_id=target_id, document=file_id, caption=caption_media, reply_markup=keyboard,parse_mode='html')
            case ContentType.AUDIO:
                file_id = msg.audio.file_id
                await msg.bot.send_audio(chat_id=target_id, audio=file_id, caption=caption_media, reply_markup=keyboard,parse_mode='html')
            case ContentType.ANIMATION:
                file_id = msg.animation.file_id
                await msg.bot.send_animation(chat_id=target_id, animation=file_id, caption=caption_media, reply_markup=keyboard,parse_mode='html')
            case ContentType.VOICE:
                file_id = msg.voice.file_id
                await msg.bot.send_voice(chat_id=target_id, voice=file_id, reply_markup=keyboard)
                await msg.bot.send_message(chat_id=target_id, text=caption_media, reply_markup=keyboard,parse_mode='html')
            case ContentType.VIDEO_NOTE:
                file_id = msg.video_note.file_id
                await msg.bot.send_video_note(chat_id=target_id, video_note=file_id, reply_markup=keyboard)
                await msg.bot.send_message(chat_id=target_id, text=caption_media, reply_markup=keyboard,parse_mode='html')
            case ContentType.STICKER:
                file_id = msg.sticker.file_id
                await msg.bot.send_sticker(chat_id=target_id, sticker=file_id, reply_markup=keyboard)
                await msg.bot.send_message(chat_id=target_id, text=caption_media,parse_mode='html',reply_markup=keyboard)
            case ContentType.TEXT:
                caption_text = f'''<b>üí¨–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!</b>\n{msg.text}\n\n \n–î–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É‚§µ'''
                await msg.bot.send_message(chat_id=target_id, text=caption_text, reply_markup=keyboard,parse_mode='html')
            case _:
                msg.reply("ü´®–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö")
    except:
        msg.reply("üòü–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞...")
    await msg.reply(
'<b>üì¶–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ</b>,\n–æ—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å',reply_markup=get_keyboard(data["target_id"]),parse_mode='HTML'
)    
@dp.callback_query(F.data.startswith('send_to:'))
async def callback_send(callback:CallbackQuery,state:FSMContext):
    target_id = callback.data.split(":")[1]
    await state.set_state(StateMessage.msg)
    await state.update_data(target_id=target_id)
    await callback.message.reply("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
    await callback.answer()
@dp.callback_query(F.data.startswith('reply_to:'))
async def callback_send(callback:CallbackQuery,state:FSMContext):
    target_id = callback.data.split(":")[1]
    await state.set_state(StateMessage.msg)
    await state.update_data(target_id=target_id)
    await callback.message.reply("–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:")
    await callback.answer()

'''
@dp.message(CommandStart())
async def start(msg:Message):
    ref = clipher.encode(msg.from_user.id)
    message = f"""
–û—Ç—Ä–∏–º–∞–ª–∏ —Å–≤–æ—î <b>–∞–Ω–æ–Ω—ñ–º–Ω–µ</b> –ø–æ—Å–∏–ª–∞–Ω–Ω—è üîó ‚Äî –≤—Å—Ç–∞–≤—Ç–µ –π–æ–≥–æ –≤ –ø—Ä–æ—Ñ—ñ–ª—å —Å–æ—Ü–º–µ—Ä–µ–∂, —Å—Ç–æ—Ä—ñ–∑ –∞–±–æ –±—ñ–æ.
–¢–∞–∫ –¥—Ä—É–∑—ñ, –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –∞–±–æ –Ω–∞–≤—ñ—Ç—å –≤–∏–ø–∞–¥–∫–æ–≤—ñ –ª—é–¥–∏ –º–æ–∂—É—Ç—å –∞–Ω–æ–Ω—ñ–º–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ —á–∏ —Ñ–∞–π–ª–∏ üé•üì∏üí¨.

–¶–µ –ø—Ä–æ—Å—Ç–∏–π —Å–ø–æ—Å—ñ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ <b>—á–µ—Å–Ω–∏–π —Ñ—ñ–¥–±–µ–∫</b> —ñ —Ü—ñ–∫–∞–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –±–µ–∑ —Ä–æ–∑–∫—Ä–∏—Ç—Ç—è –æ—Å–æ–±–∏—Å—Ç–∏—Ö –¥–∞–Ω–∏—Ö üïµÔ∏è‚Äç‚ôÇÔ∏è‚ú®.
–î—ñ–ª—ñ—Ç—å—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º, –±—É–¥—å—Ç–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏–º–∏ ‚Äî —ñ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞–π—Ç–µ –∑–∞ —Å—é—Ä–ø—Ä–∏–∑–∞–º–∏, —è–∫—ñ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å <b>–∞–Ω–æ–Ω—ñ–º–Ω—ñ—Å—Ç—å! üéâ</b>\n
https://t.me/Anonymous_ukraine_bot?start={ref} - –ü–æ—à–∏—Ä—é–π —Ü–µ–π <b>—Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–æ–¥</b> —ñ –¥–∏–≤–∏—Å—å, —è–∫ –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è! üöÄ
"""
    await msg.reply(message,reply_markup=keyboard_share(ref),parse_mode='html')'''
@dp.message(Command(commands=['ref','start']))
async def ref(msg:Message):
    ref = clipher.encode(msg.from_user.id)
    message = f"""
–û—Ç—Ä–∏–º–∞–ª–∏ —Å–≤–æ—î <b>–∞–Ω–æ–Ω—ñ–º–Ω–µ</b> –ø–æ—Å–∏–ª–∞–Ω–Ω—è üîó ‚Äî –≤—Å—Ç–∞–≤—Ç–µ –π–æ–≥–æ –≤ –ø—Ä–æ—Ñ—ñ–ª—å —Å–æ—Ü–º–µ—Ä–µ–∂, —Å—Ç–æ—Ä—ñ–∑ –∞–±–æ –±—ñ–æ.
–¢–∞–∫ –¥—Ä—É–∑—ñ, –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ –∞–±–æ –Ω–∞–≤—ñ—Ç—å –≤–∏–ø–∞–¥–∫–æ–≤—ñ –ª—é–¥–∏ –º–æ–∂—É—Ç—å –∞–Ω–æ–Ω—ñ–º–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ —á–∏ —Ñ–∞–π–ª–∏ üé•üì∏üí¨.

–¶–µ –ø—Ä–æ—Å—Ç–∏–π —Å–ø–æ—Å—ñ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ <b>—á–µ—Å–Ω–∏–π —Ñ—ñ–¥–±–µ–∫</b> —ñ —Ü—ñ–∫–∞–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –±–µ–∑ —Ä–æ–∑–∫—Ä–∏—Ç—Ç—è –æ—Å–æ–±–∏—Å—Ç–∏—Ö –¥–∞–Ω–∏—Ö üïµÔ∏è‚Äç‚ôÇÔ∏è‚ú®.
–î—ñ–ª—ñ—Ç—å—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º, –±—É–¥—å—Ç–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏–º–∏ ‚Äî —ñ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞–π—Ç–µ –∑–∞ —Å—é—Ä–ø—Ä–∏–∑–∞–º–∏, —è–∫—ñ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å <b>–∞–Ω–æ–Ω—ñ–º–Ω—ñ—Å—Ç—å! üéâ</b>\n
https://t.me/Anonymous_ukraine_bot?start={ref} - –ü–æ—à–∏—Ä—é–π —Ü–µ–π <b>—Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–æ–¥</b> —ñ –¥–∏–≤–∏—Å—å, —è–∫ –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è! üöÄ
"""
    await msg.reply(message,reply_markup=keyboard_share(ref),parse_mode='html')
async def main():
    await dp.start_polling(bot)
if __name__ == "__main__":
    asyncio.run(main())